name: Create staging PR

on:
  workflow_dispatch:
    inputs:
      target_version:
        description: "The target version (x.x.x-x)"
        type: string
        required: true

env:
  staging_branch: staging/${{ inputs.target_version }}

jobs:
  Build-changelog:
    runs-on: ubuntu-latest
    outputs:
      staging_branch: ${{ env.staging_branch }}
    steps:
      - name: Fail if branch is not master
        if: github.event_name == 'workflow_dispatch' && github.ref != 'refs/heads/fakemaster'
        run: |
          echo "This workflow should not be triggered with workflow_dispatch on a branch other than fakemaster"
          exit 1

      - name: "Checkout repo"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: "Create beta branch"
        id: new-branch
        run: |          
          git checkout -b ${{ env.staging_branch }}

      # release-changelog-builder-action 預設是抓 (second closest - latest tag) 之間的commit
      # 但staging 不會有正式的tag, 所以要抓當前最新的 commit 給參數 toTag, latest tag 給 fromTag
      - name: "Arrange change-log commit"
        if: startsWith(github.ref, 'refs/tags/') != true
        id: commit_range
        run: |
          latestTag=$(git rev-list --tags --skip=0 --max-count=1)
          echo "fromTag=$latestTag" >> $GITHUB_OUTPUT
          echo "toTag=$GITHUB_REF" >> $GITHUB_OUTPUT

      - name: "Build Changelog"
        id: changelog_builder
        uses: mikepenz/release-changelog-builder-action@v3.7.2
        with:
          fromTag: ${{ steps.commit_range.outputs.fromTag }}
          toTag: ${{ steps.commit_range.outputs.toTag }}
          configuration: ".github/changelog_configs.json"
          outputFile: "changelog.txt"

      - name: Commit files
        run: |
          git config user.email ${{ secrets.ACTION_BOT_EMAIL }}
          git config user.name ${{ secrets.ACTION_BOT_NAME }}
          git add .
          git commit -m "Update changelog"

      - name: "Push changes"
        uses: ad-m/github-push-action@master
        with:
          branch: ${{ env.staging_branch }}

  Bump-version:
    needs: [ Build-changelog ]
    uses: ./.github/workflows/use-case-bump-version.yaml
    secrets: inherit
    with:
      new_branch: ${{ needs.Build-changelog.outputs.staging_branch }}
      version: ${{ inputs.target_version }}


  Create-pull-request:
    needs: [ Bump-version ]
    runs-on: ubuntu-latest
    steps:
      - name: Create Pull Request
        id: create-pr
        uses: actions/github-script@v6
        env:
          BASE: "fakemaster"
          HEAD: ${{ env.staging_branch }}
        with:
          script: |
            const { data: pull } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "Staging APP version rollout",
              head: process.env.HEAD,
              base: process.env.BASE
            })
            
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pull.number,
              labels: ["no-changelog"]
            })
                    
            core.setOutput("pr-number", pull.number)
#            await github.rest.pulls.createReview({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              pull_number: pull.number,
#              body: "Auto approve",
#              event: "APPROVE",
#            })
#
#            await github.rest.pulls.merge({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              pull_number: pull.number,
#              merge_method: "squash",
#              commit_title: "version rollout"
#            });

#      - name: Enable Pull Request Automerge
#        run: gh pr merge --squash --auto "${{ steps.create-pr.outputs.pr-number }}"
#        env:
#          GH_TOKEN: ${{ github.token }}
#

#        run: |
#          gh pr create --title "Staging APP rollout" --body "Auto created" --label "no-changelog" --base "fakemaster" --head "${{ env.staging_branch }}"
#      - name: "Merge to release"
#        run: |
#          git config user.email ${{ secrets.ACTION_BOT_EMAIL }}
#          git config user.name ${{ secrets.ACTION_BOT_NAME }}
#          git merge --squash "origin/${{ env.staging_branch }}"
#          git commit -m "release staging version: '${{ env.staging_branch }}'"
#
#      - name: "Push release"
#        uses: ad-m/github-push-action@master
#        with:
#          branch: release
#
#      - name: "Delete staging branch"
#        run: |
#          git push origin -d ${{ env.staging_branch }}